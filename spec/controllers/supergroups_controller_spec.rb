require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.


shared_examples "a supergroup type" do |type|
  let(:type) {type}
  let(:type_sym) {type.downcase.to_sym}

  let(:valid_attributes) { { "name" => "name", "short_name" => "sn", "type"=> type } }
  
  before(:all) do
    @division = FactoryGirl.create(:division)
  end
  
  after(:all) do
    @division.destroy
  end
  
  describe "Security" do 

    before(:all) do 
      @admin = admin
    end

    describe "Low privilege access" do
      login_person

      describe "POST create" do
        it "won't allow union or company creation" do
          post :create, {type_sym => valid_attributes, type: type, division_id: @division.id}
          expect(response).to be_forbidden
        end
      end

      describe "edit/update" do
        it "won't allow edit of unions or companies unless my own" do
          supergroup = Supergroup.create! valid_attributes
          get :edit, {:id => supergroup.to_param, type: type, division_id: @division.id }
          response.should be_forbidden

          if type == "Union"
            supergroup = subject.current_person.union
            get :edit, {:id => supergroup.to_param, type: type, division_id: @division.id }
            response.should render_template(:edit)   
          end       
        end

        it "won't allow update of unions or companies unless my own" do
          supergroup = Supergroup.create! valid_attributes
          post :edit, {:id => supergroup.to_param, name: "blah", type: type, division_id: @division.id }
          response.should be_forbidden

          if type == "Union"
            supergroup = subject.current_person.union
            put :update, { :id => supergroup.to_param, type_sym => {name: "blah"}, type: type, division_id: @division.id }
            response.should redirect_to(supergroup)  
          end        
        end
      end
    end
  end

  describe "basic functionality" do
    login_admin

    describe "GET index" do
      it "assigns all supergroups as @supergroups" do
        supergroup = Supergroup.create! valid_attributes
        get :index, {type: type, division_id: @division.id}
        
        assigns(:supergroups).should include(supergroup) 
        
        ## Was failing because of database cleaning issues
        #if type == "Union"
        #  binding.pry
        #  expected_list = ([owner_union]+[supergroup]).sort_by{|x| [x.name.downcase, x.id]}
        #  assigns(:supergroups).should eq(expected_list) 
        #else
        #  assigns(:supergroups).should eq([supergroup])
        #end
      end
    end

    describe "GET show" do
      it "assigns the requested supergroup as @supergroup" do
        supergroup = Supergroup.create! valid_attributes
        get :show, {:id => supergroup.to_param, type: type, division_id: @division.id}
        assigns(:supergroup).should eq(supergroup)
      end
    end

    describe "GET new" do
      it "assigns a new supergroup as @supergroup" do
        get :new, {type: type, division_id: @division.id}
        assigns(:supergroup).should be_a_new(Supergroup)
      end
    end

    describe "GET edit" do
      it "assigns the requested supergroup as @supergroup" do
        supergroup = Supergroup.create! valid_attributes
        get :edit, {:id => supergroup.to_param, type: type, division_id: @division.id}
        assigns(:supergroup).should eq(supergroup)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Supergroup" do
          expect {
            post :create, {type_sym => valid_attributes, type: type, division_id: @division.id}
          }.to change(Supergroup, :count).by(1)
        end

        it "assigns a newly created supergroup as @supergroup" do
          post :create, {type_sym => valid_attributes, type: type, division_id: @division.id}
          assigns(:supergroup).should be_a(Supergroup)
          assigns(:supergroup).should be_persisted
        end

        it "redirects to the created supergroup" do
          post :create, {type_sym => valid_attributes, type: type, division_id: @division.id}
          response.should redirect_to(Supergroup.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved supergroup as @supergroup" do
          # Trigger the behavior that occurs when invalid params are submitted
          Supergroup.any_instance.stub(:save).and_return(false)
          post :create, {type_sym => { "name" => "invalid value" }, type: type, division_id: @division.id}
          assigns(:supergroup).should be_a_new(Supergroup)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Supergroup.any_instance.stub(:save).and_return(false)
          post :create, {type_sym => { "name" => "invalid value" }, type: type, division_id: @division.id}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested supergroup" do
          supergroup = Supergroup.create! valid_attributes
          # Assuming there are no other supergroups in the database, this
          # specifies that the Supergroup created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Supergroup.any_instance.should_receive(:update).with({ "name" => "MyString", "type" => type })
          put :update, {:id => supergroup.to_param, type_sym => { "name" => "MyString" }, type: type, division_id: @division.id}
        end

        it "assigns the requested supergroup as @supergroup" do
          supergroup = Supergroup.create! valid_attributes
          put :update, {:id => supergroup.to_param, type_sym => valid_attributes, type: type, division_id: @division.id}
          assigns(:supergroup).should eq(supergroup)
        end

        it "redirects to the supergroup" do
          supergroup = Supergroup.create! valid_attributes
          put :update, {:id => supergroup.to_param, type_sym => valid_attributes, type: type, division_id: @division.id}
          response.should redirect_to(supergroup)
        end
      end

      describe "with invalid params" do
        it "assigns the supergroup as @supergroup" do
          supergroup = Supergroup.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Supergroup.any_instance.stub(:save).and_return(false)
          put :update, {:id => supergroup.to_param, type_sym => { "name" => "invalid value" }, type: type, division_id: @division.id}
          assigns(:supergroup).should eq(supergroup)
        end

        it "re-renders the 'edit' template" do
          supergroup = Supergroup.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Supergroup.any_instance.stub(:save).and_return(false)
          put :update, {:id => supergroup.to_param, type_sym => { "name" => "invalid value" }, type: type, division_id: @division.id}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested supergroup" do
        supergroup = Supergroup.create! valid_attributes
        expect {
          delete :destroy, {:id => supergroup.to_param, type: type, division_id: @division.id}
        }.to change(Supergroup, :count).by(-1)
      end

      it "redirects to the supergroups list" do
        supergroup = Supergroup.create! valid_attributes
        delete :destroy, {:id => supergroup.to_param, type: type, division_id: @division.id}
        response.should redirect_to(type.constantize)
      end
    end
  end
end

RSpec.describe SupergroupsController do
  #https://www.relishapp.com/rspec/rspec-core/docs/example-groups/shared-examples
  it_behaves_like "a supergroup type", "Union"
  it_behaves_like "a supergroup type", "Company"
end
